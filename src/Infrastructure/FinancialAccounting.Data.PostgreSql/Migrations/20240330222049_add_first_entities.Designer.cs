// <auto-generated />
using System;
using FinancialAccounting.Dara.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinancialAccounting.Dara.PostgreSql.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20240330222049_add_first_entities")]
    partial class addfirstentities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance")
                        .HasComment("Баланс");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Идентификатор пользователя");

                    b.HasKey("Id")
                        .HasName("pk_bank_account");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_bank_account_user_id");

                    b.ToTable("bank_account", "public", t =>
                        {
                            t.HasComment("Банковский счет");
                        });
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title")
                        .HasComment("Название категории");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.ToTable("category", "public", t =>
                        {
                            t.HasComment("Категория");
                        });
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ContentType")
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid")
                        .HasColumnName("photo_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pk_file");

                    b.ToTable("file", "public", t =>
                        {
                            t.HasComment("Файл");
                        });
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.FinancialTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("ActualDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_date")
                        .HasComment("Фактическая дата совершения операции");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount")
                        .HasComment("Сумма операции");

                    b.Property<Guid?>("BankAccountId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("bank_account_id")
                        .HasComment("Идентификатор счета");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("category_id")
                        .HasComment("Идентификатор категории");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .HasComment("Комментарий");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type")
                        .HasComment("Тип операции");

                    b.HasKey("Id")
                        .HasName("pk_financial_transaction");

                    b.HasIndex("BankAccountId")
                        .HasDatabaseName("ix_financial_transaction_bank_account_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_financial_transaction_category_id");

                    b.ToTable("financial_transaction", "public", t =>
                        {
                            t.HasComment("Финансовая операция");
                        });
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id")
                        .HasComment("Идентификатор файла");

                    b.Property<Guid>("FinancialTransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("financial_transaction_id")
                        .HasComment("Идентификатор финансовой операции");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.HasKey("Id")
                        .HasName("pk_photo");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasDatabaseName("ix_photo_file_id");

                    b.HasIndex("FinancialTransactionId")
                        .HasDatabaseName("ix_photo_financial_transaction_id");

                    b.ToTable("photo", "public", t =>
                        {
                            t.HasComment("Фотография");
                        });
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount")
                        .HasComment("Сумма перевода");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<Guid>("FromBankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_bank_account_id")
                        .HasComment("Идентификатор счета, с которого был отправлен перевод");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<Guid>("ToBankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_bank_account_id")
                        .HasComment("Идентификатор счета, на который был отправлен перевод");

                    b.HasKey("Id")
                        .HasName("pk_transfer");

                    b.HasIndex("FromBankAccountId")
                        .HasDatabaseName("ix_transfer_from_bank_account_id");

                    b.HasIndex("ToBankAccountId")
                        .HasDatabaseName("ix_transfer_to_bank_account_id");

                    b.ToTable("transfer", "public", t =>
                        {
                            t.HasComment("Перевод");
                        });
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComment("Электронная почта");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login")
                        .HasComment("Логин");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash")
                        .HasComment("Хеш пароля");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone")
                        .HasComment("Телефон");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "public", t =>
                        {
                            t.HasComment("Пользователь");
                        });
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("FinancialAccounting.Domain.Entities.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_bank_account_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.FinancialTransaction", b =>
                {
                    b.HasOne("FinancialAccounting.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_financial_transaction_bank_account_bank_account_id");

                    b.HasOne("FinancialAccounting.Domain.Entities.Category", "Category")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_financial_transaction_category_category_id");

                    b.Navigation("BankAccount");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.Photo", b =>
                {
                    b.HasOne("FinancialAccounting.Domain.Entities.File", "File")
                        .WithOne("Photo")
                        .HasForeignKey("FinancialAccounting.Domain.Entities.Photo", "FileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_photo_file_file_id");

                    b.HasOne("FinancialAccounting.Domain.Entities.FinancialTransaction", "FinancialTransaction")
                        .WithMany("Photos")
                        .HasForeignKey("FinancialTransactionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_photo_financial_transaction_financial_transaction_id");

                    b.Navigation("File");

                    b.Navigation("FinancialTransaction");
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.Transfer", b =>
                {
                    b.HasOne("FinancialAccounting.Domain.Entities.BankAccount", "FromBankAccount")
                        .WithMany("InTransfers")
                        .HasForeignKey("FromBankAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_bank_account_from_bank_account_id");

                    b.HasOne("FinancialAccounting.Domain.Entities.BankAccount", "ToBankAccount")
                        .WithMany("OutTransfers")
                        .HasForeignKey("ToBankAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_bank_account_to_bank_account_id");

                    b.Navigation("FromBankAccount");

                    b.Navigation("ToBankAccount");
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.BankAccount", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("InTransfers");

                    b.Navigation("OutTransfers");
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.Category", b =>
                {
                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.File", b =>
                {
                    b.Navigation("Photo")
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.FinancialTransaction", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("FinancialAccounting.Domain.Entities.User", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
